#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

BUILD_DIR=$1

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path

install_java() {
  local baseDir=$1
  local jreUrl=$2
  if [ ! -d "${baseDir}" ]; then
    error_return "Invalid directory to install java."
    return 1
  fi

  local jreDir="${baseDir}"/.jre
  local jreTarball="${jreDir}"/jre.tar.gz
  local javaExe="${jreDir}/bin/java"
  mkdir -p "${jreDir}"

  if [ ! -f "${jreTarball}" ] && [ ! -f "${javaExe}" ] ; then
    rm -rf "${jreDir}"
    mkdir -p "${jreDir}"
    validate_jre_url ${jreUrl} ${jreVersion}
    curl --retry 3 --silent --show-error --location ${jreUrl} --output ${jreTarball}
    tar pxzf ${jreTarball} -C "${jreDir}"
    rm ${jreTarball}
    install_cacerts ${jreDir}
    echo "${jreVersion}" > "${jreDir}/version"
    if [ ! -f "${javaExe}" ]; then
      error_return "Unable to retrieve the JRE."
      return 1
    fi
  fi
}

install_cacerts() {
  local jreDir=$1
  if [ -f ${jreDir}/jre/lib/security/cacerts ] && [ -f /etc/ssl/certs/java/cacerts ]; then
    mv ${jreDir}/jre/lib/security/cacerts ${jreDir}/jre/lib/security/cacerts.old
    ln -s /etc/ssl/certs/java/cacerts ${jreDir}/jre/lib/security/cacerts
  elif [ -f ${jreDir}/lib/security/cacerts ] && [ -f /etc/ssl/certs/java/cacerts ]; then
    mv ${jreDir}/lib/security/cacerts ${jreDir}/lib/security/cacerts.old
    ln -s /etc/ssl/certs/java/cacerts ${jreDir}/lib/security/cacerts
  fi
}

validate_jre_url() {
  local jreUrl=${1}
  if [ "$(_get_url_status ${jreUrl})" != "200" ]; then
    echo ""
    error_return "Unable to download: $jreUrl"
    return 1
  fi
}

_get_url_status() {
  curl --retry 3 --silent --head -w %{http_code} -L "${1}" -o /dev/null
}

error() {
  echo
  echo " !     ERROR: $*" | indent no_first_line_indent
  echo
  exit 1
}

error_return() {
  echo
  echo " !     ERROR: $*" | indent no_first_line_indent
  echo
  return 1
}

warning() {
  echo
  echo " !     WARNING: $*" | indent no_first_line_indent
  echo
}

warning_inline() {
  echo " !     WARNING: $*" | indent no_first_line_indent
}

status() {
  echo "-----> $*"
}

status_pending() {
  echo -n "-----> $*..."
}

status_done() {
  echo " done"
}

notice() {
  echo
  echo "NOTICE: $*" | indent
  echo
}

notice_inline() {
  echo "NOTICE: $*" | indent
}

# sed -l basically makes sed replace and buffer through stdin to stdout
# so you get updates while the command runs and dont wait for the end
# e.g. npm install | indent
indent() {
  # if an arg is given it's a flag indicating we shouldn't indent the first line, so use :+ to tell SED accordingly if that parameter is set, otherwise null string for no range selector prefix (it selects from line 2 onwards and then every 1st line, meaning all lines)
  c="${1:+"2,999"} s/^/       /"
  case $(uname) in
    Darwin) sed -l "$c";; # mac/bsd sed: -l buffers on line boundaries
    *)      sed -u "$c";; # unix/gnu sed: -u unbuffered (arbitrary) chunks of data
  esac
}

export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|JAVA_OPTS|JAVA_TOOL_OPTIONS)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

copy_directories() {
  dirList=$1
  sourceDir=$2
  destDir=$3

  if [ ! -d "${sourceDir}" ] ; then echo "Invalid source directory to copy from. ${sourceDir}" ; return 1 ; fi
  if [ ! -d "${destDir}" ] ; then echo "Invalid destination directory to copy to. ${destDir}" ; return 1 ; fi

  for dir in ${dirList} ; do
    rm -rf "${destDir:?}/${dir:?}"

    if [ -d "${sourceDir}/${dir}" ] ; then
      mkdir -p "${destDir}/${dir}"
      cp -r "${sourceDir}/${dir}/." "${destDir}/${dir}"
    fi
  done
}


install_java ${BUILD_DIR} ${JRE_URL}
